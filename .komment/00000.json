[
  {
    "name": "Post.ts",
    "path": "src/entities/Post.ts",
    "content": {
      "structured": {
        "description": "An Entity class `Post` with three properties: `id`, `createdAt`, and `updatedAt`. The `id` property is marked as a primary key using `@PrimaryKey()` and has a type of `number`. The `createdAt` and `updatedAt` properties are marked as timestamps using `@Field(() => Date)` and have default values set using `@Property({ default: \"now()\" })`. The `title` property is marked as a non-nullable string using `@Property({ type: \"text\" })`.",
        "items": [
          {
            "id": "b67e7f5a-d136-48ba-f64a-7a3a096f2b03",
            "ancestors": [],
            "description": "Defines a data structure for storing information about posts, including an ID, creation and update timestamps, and a title.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "id",
                "type_name": "number",
                "description": "Annotated with `@PrimaryKey()`, indicating that it serves as the primary key for the class."
              },
              {
                "name": "createdAt",
                "type_name": "new_expression",
                "description": "Automatically updated upon creation of the object, providing a current date value."
              },
              {
                "name": "updatedAt",
                "type_name": "new_expression",
                "description": "Initialized with a default value of current date and time using the `new Date()` method."
              },
              {
                "name": "title",
                "type_name": "string",
                "description": "Non-nullable, meaning it cannot be null or missing."
              }
            ],
            "name": "Post",
            "location": {
              "start": 6,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "User.ts",
    "path": "src/entities/User.ts",
    "content": {
      "structured": {
        "description": "An Entity class named User, which represents a user in a graphQL schema. The class has four properties: id (a primary key), createdAt and updatedAt (both of which are timestamps), and username and password (both of which are strings). The code also imports various packages from the Mikro-ORM and Type-GraphQL libraries, which provide tools for defining graphQL schemas and entities.",
        "items": [
          {
            "id": "ee4f8980-c9a6-6286-f94a-4da15ffe7cc7",
            "ancestors": [],
            "description": "Defines a representation of a user in a system, with fields for ID, created and updated at timestamps, username, and password.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "id",
                "type_name": "number",
                "description": "Marked as `@PrimaryKey()`, indicating that it serves as a unique identifier for each user instance, making it the primary key of the User table."
              },
              {
                "name": "createdAt",
                "type_name": "new_expression",
                "description": "Initialized to the current date and time when the class is created or updated."
              },
              {
                "name": "updatedAt",
                "type_name": "new_expression",
                "description": "Automatically updated on save to the latest available date."
              },
              {
                "name": "username",
                "type_name": "string",
                "description": "Unique, meaning it cannot be duplicated for any other user account."
              },
              {
                "name": "password",
                "type_name": "string",
                "description": "Marked as unique, indicating that each user must have a unique password."
              }
            ],
            "name": "User",
            "location": {
              "start": 6,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Migration20240722191709.ts",
    "path": "src/migrations/Migration20240722191709.ts",
    "content": {
      "structured": {
        "description": "A migration class that adds and modifies tables in a database. The `up()` method creates a new table called \"user\" with columns for \"id\", \"created_at\", \"updated_at\", \"username\", and \"password\". It also adds a unique constraint on the \"username\" column. In the \"down()\" method, the table is dropped using the cascade option, and the \"created_at\" column type is changed to a timestamptz(6) data type.",
        "items": [
          {
            "id": "80dafe0e-8d46-2ebd-984e-907320260f68",
            "ancestors": [],
            "description": "Modifies a database by creating and altering tables, adding constraints, and setting default values for columns.",
            "interfaces": [],
            "superclass": "Migration",
            "is_abstract": false,
            "fields": [],
            "name": "Migration20240722191709",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 18,
            "docLength": null
          },
          {
            "id": "a214b43f-6f23-8cae-2640-674db2e43ccf",
            "ancestors": [
              "80dafe0e-8d46-2ebd-984e-907320260f68"
            ],
            "description": "Creates and modifies tables, adding columns and constraints, and updating data types and default values for the `post` table.",
            "params": [],
            "returns": {
              "type_name": "Promise<void>",
              "description": "An object that represents a promise that will be resolved when the asynchronous operation is complete."
            },
            "usage": {
              "language": "typescript",
              "code": "await new Migration20240722191709().up();\n",
              "description": ""
            },
            "name": "up",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "02da4f28-e5b2-789b-fd4d-c813159f578e",
            "ancestors": [
              "80dafe0e-8d46-2ebd-984e-907320260f68"
            ],
            "description": "Modifies two tables in a database: \"user\" and \"post\". The modifications include dropping the default value from the \"created_at\" column in the \"post\" table, and changing its data type to \"timestamptz(6)\".",
            "params": [],
            "returns": {
              "type_name": "Promise<void>",
              "description": "A promise that resolves to no value."
            },
            "usage": {
              "language": "typescript",
              "code": "const migration = new Migration20240722191709();\nawait migration.down();\n",
              "description": ""
            },
            "name": "down",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "post.ts",
    "path": "src/resolvers/post.ts",
    "content": {
      "structured": {
        "description": "A GraphQL resolver for a Post type, handling queries and mutations related to posts. The resolver uses the `type-graphql` library and the `MyContext` type definition. It exposes query methods `posts()` and `post()`, which return a list of posts or a single post respectively, and mutation methods `createPost()`, `updatePost()`, and `deletePost()`, which create, update, and delete posts respectively.",
        "items": [
          {
            "id": "fc52bdc5-69a5-6592-fb45-effc365f31a0",
            "ancestors": [],
            "description": "Provides resolution functions for Post entities in a GraphQL schema, allowing for querying, creating, updating, and deleting posts.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [],
            "name": "PostResolver",
            "location": {
              "start": 5,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 58,
            "docLength": null
          },
          {
            "id": "43f033c8-cbfd-e599-0b40-6ab971457ecb",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Retrieves an array of `Post` objects from the database using the `em` instance's `find()` method.",
            "params": [
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Used to represent an instance of the `MyContext` class, which provides access to data stored in a database or other data storage system."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used as the entity manager for querying posts."
              }
            ],
            "returns": {
              "type_name": "Promise<Post[]>",
              "description": "An array of Post objects."
            },
            "usage": {
              "language": "typescript",
              "code": "const myPosts = await new PostResolver().posts(); // fetch all posts\nconst post = await new PostResolver().post(1); // fetch a single post by id\nconst createdPost = await new PostResolver().createPost(\"My first post\"); // create a new post with title \"My first post\"\nconst updatedPost = await new PostResolver().updatePost(1, \"My updated post\"); // update the title of an existing post\n",
              "description": ""
            },
            "name": "posts",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9a25d883-f1ce-6ca7-be4b-e213a465dbe9",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Retrieves a post from the database based on its ID using the `em.findOne()` method.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify a specific post to be retrieved or created."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Referred to as `em`. This collection represents an instance of `MyContext`."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to represent the context of the application, providing access to entities and their relationships within the application's domain model."
              }
            ],
            "returns": {
              "type_name": "Promise<Post | null>",
              "description": "A promise that resolves to either a Post object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "const { Post } = await post(1); // Returns a single post with the given id\nconst { Posts } = await posts(); // Returns all posts\nconst newPost = await createPost('new title'); // Creates a new post with the specified title\nconst updatedPost = await updatePost(1, 'updated title'); // Updates an existing post with the specified id and title\n",
              "description": ""
            },
            "name": "post",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "2219a7c9-6fa7-6295-0248-3d58910bab91",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Creates a new post entity and persists it to the database, returning the newly created post object.",
            "params": [
              {
                "name": "title",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to set the title of a new post."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Represented by the abbreviation `em`. It provides access to the entity manager, allowing for the creation and persistence of objects in the database."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to represent the entity manager that handles creation and persistence of data objects, such as Posts, in this case."
              }
            ],
            "returns": {
              "type_name": "Promise<Post>",
              "description": "A Post object containing the title, createdAt and updatedAt fields."
            },
            "usage": {
              "language": "typescript",
              "code": "const newPost = await createPost(\"New Post\");\n",
              "description": ""
            },
            "name": "createPost",
            "location": {
              "start": 20,
              "insert": 20,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "16e10a9a-df51-4dbc-bb4e-ded2ccb22cb2",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Updates an existing post in a database, setting its title if provided, and returning the updated post or null if the post does not exist.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify the post to be updated."
              },
              {
                "name": "title",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Nullable. It updates the title field of the post if provided, otherwise leaves it unchanged."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Referenced as `em`. It represents an instance of the `MyContext` class, which provides a repository for managing posts in the application's database."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to manage the persistence and flushing of updated post data to the database."
              }
            ],
            "returns": {
              "type_name": "Promise<Post | null>",
              "description": "A promise that resolves to a Post object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "const post = await PostResolver.updatePost(1, \"New Title\");\n",
              "description": ""
            },
            "name": "updatePost",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6318e1c6-917f-1c94-bd45-b4357ba69dc8",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Deletes a post with the given ID from the database using the `nativeDelete()` method of the context object.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify the post to be deleted."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Named 'em'. It is an instance of the MyContext class, which provides access to the data layer for the application's data model."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to provide access to the underlying database context for deleting a post."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>",
              "description": "1 if the post was deleted successfully, and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "await PostResolver.deletePost(123) // Assuming ID 123 exists\nconst post = await PostResolver.updatePost(123, 'New Title')\n",
              "description": ""
            },
            "name": "deletePost",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "user.ts",
    "path": "src/resolvers/user.ts",
    "content": {
      "structured": {
        "description": "GraphQL mutations and queries for a user authentication system using Argon2 password verification. The `UserResolver` class provides resolutions for user-related operations, including creating and updating user accounts, validating user input, and authenticating users through login and register functions. The `Login` function checks the provided username and password against an existing user record and verifies the password using Argon2, while the `Register` function creates a new user entity and persists it to the database upon successful validation.",
        "items": [
          {
            "id": "511e70dd-f83d-b19e-f342-8ac11381ab67",
            "ancestors": [
              "8fe55e03-a705-5487-cc44-c85209788051"
            ],
            "description": "Retrieves a `User` entity based on the user ID stored in the session.",
            "params": [
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Passed as an argument to the function. It contains two properties: `req` and `em`."
              },
              {
                "name": "obj.req",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Passed in from the parent component as a prop. It contains information about the current HTTP request, including the user's session ID."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to access the Entity Manager (EM) for performing database operations."
              }
            ],
            "returns": {
              "type_name": "User",
              "description": "An instance of the class User."
            },
            "usage": {
              "language": "typescript",
              "code": "const user = await this.userResolver.me({ req, em });\nif (user) {\n\t// do something with the user\n} else {\n\t// handle empty user response\n}\n",
              "description": ""
            },
            "name": "me",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "constants.ts",
    "path": "src/constants.ts",
    "content": {
      "structured": {
        "description": "A constant `__prod__` that represents whether the current environment is production or not. The `process.env.NODE_ENV` property is used to determine the environment, and the value of `__prod__` is set to `true` in production environments and `false` otherwise.",
        "items": []
      }
    }
  },
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "An express server using MikroORM and Apollo Server to create a GraphQL API. The code initializes an instance of MikroORM, migrates the database, and creates an ApolloServer using the schema built with `buildSchema`. The server is started, middleware is applied to the express app, and a post is created and persisted in the database using MikroORM.",
        "items": [
          {
            "id": "d4fd84c2-19cb-3681-1b4b-dc3ce70d7fe8",
            "ancestors": [
              "48c93cd4-20eb-5ca2-7549-a2b9db419200"
            ],
            "description": "Starts an HTTP server listening on port 4000 and logs \"Server started on localhost:4000\" to the console when executed.",
            "name": null,
            "location": {
              "start": 73,
              "insert": 74,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 6,
            "docLength": null
          },
          {
            "id": "8a25a8be-9d62-e2a1-d343-fa318a4da12f",
            "ancestors": [],
            "description": "Logs any errors passed to it via console.error",
            "name": null,
            "location": {
              "start": 91,
              "insert": 92,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "mikro-orm.config.ts",
    "path": "src/mikro-orm.config.ts",
    "content": {
      "structured": {
        "description": "Configuration parameters for MikroORM, a popular ORM (Object-Relational Mapping) toolkit. It specifies various settings for the PostgreSQL database driver, including the database name, username, password, port number, and debug mode. Additionally, it defines which entities will be used with MikroORM, and allows global context access. The code also sets the path to the migrations folder, which contains SQL scripts for creating and modifying the database schema.",
        "items": []
      }
    }
  },
  {
    "name": "types.ts",
    "path": "src/types.ts",
    "content": {
      "structured": {
        "description": "An interface `MyContext` that provides access to an Entity Manager and other Express-related objects, such as a Request and Response object. The Entity Manager is a fundamental part of any Object-Relational Mapping (ORM) tool, which allows developers to interact with databases using objects rather than writing SQL queries directly. Additionally, the code declares a type `IDatabaseDriver<Connection>` that represents the driver used to connect to the database, and imports the `express-session` package, which provides an interface for working with session data in Express applications.",
        "items": [
          {
            "id": "11a2fcd5-be1a-ddb5-954f-2bc5a7986541",
            "ancestors": [],
            "description": "Defines a representation of a user session, including a unique identifier (‘userId’)",
            "name": "Session",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "interface",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "hello.ts",
    "path": "src/resolvers/hello.ts",
    "content": {
      "structured": {
        "description": "A GraphQL resolver class named HelloResolver, which contains a single query method hello() that returns a string value \"Hello World!\". The query method is marked with the `@Query()` decorator from the `type-graphql` package, indicating that it is a GraphQL query.",
        "items": [
          {
            "id": "08f29c38-6fff-9597-4d49-af9822d97b11",
            "ancestors": [],
            "description": "Defines a resolver for generating a string message \"Hello World!\" in response to an unknown query.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [],
            "name": "HelloResolver",
            "location": {
              "start": 4,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 6,
            "docLength": null
          },
          {
            "id": "b03181a4-0a4b-2ca6-8c4c-1472e3994412",
            "ancestors": [
              "08f29c38-6fff-9597-4d49-af9822d97b11"
            ],
            "description": "Returns the string \"Hello World!\" when called, indicating successful resolution of the hello request.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "\"Hello World!\""
            },
            "usage": {
              "language": "typescript",
              "code": "const helloResolver = new HelloResolver();\nconst greeting = await helloResolver.hello(); // \"Hello World!\"\n",
              "description": ""
            },
            "name": "hello",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "codegen.ts",
    "path": "web/codegen.ts",
    "content": {
      "structured": {
        "description": "A configuration object for GraphQL CodeGen, a tool for generating GraphQL schema, queries, and mutations based on TypeScript definitions. The configuration specifies the following:\n\n* Overwrite existing files (default: true)\n* Schema URL: \"http://localhost:4000/graphql\"\n* Input files: \"src/graphql/**/*.graphql\"\n* Output directory: \"src/gql/\" with preset \"client\", plugins \"typescript\", \"typescript-operations\", and \"typescript-urql\".",
        "items": []
      }
    }
  },
  {
    "name": "index.ts",
    "path": "server/src/index.ts",
    "content": {
      "structured": {
        "description": "An express server using Apollo Server and MikroORM. The main function initializes MikroORM, migrates the database, creates an ApolloServer schema, starts the server, and persists a post in the database using MikroORM.",
        "items": [
          {
            "id": "188283bb-8581-de86-af48-09fccb2d1c6e",
            "ancestors": [
              "319fdaf8-f428-d492-dd4e-ae3c9f5b158f"
            ],
            "description": "Starts a server listening on port 4000 and logs a message to the console when it starts.",
            "name": null,
            "location": {
              "start": 76,
              "insert": 77,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1d752ae5-6d28-1bae-ff43-9d5393920a9a",
            "ancestors": [],
            "description": "Handles any type of error by logging it to console using `console.error()` method.",
            "name": null,
            "location": {
              "start": 81,
              "insert": 82,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "_app.tsx",
    "path": "web/src/pages/_app.tsx",
    "content": {
      "structured": {
        "description": "A component called `MyApp` that uses the `@chakra-ui/react` and `urql` libraries to create a GraphQL client and provide it as a provider to a React component. The `ChakraProvider` is used to apply a theme to the component, while the `Client` class is used to create a GraphQL client with two exchanges: `cacheExchange` and `fetchExchange`.",
        "items": [
          {
            "id": "7c69a183-b742-e497-1748-8c68d8068866",
            "ancestors": [],
            "description": "Defines an React component that wraps another component with two providers: `ChakraProvider` and `Provider`. The `ChakraProvider` sets the theme for the component, while the `Provider` sets the client object for the component to use.",
            "params": [
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Passed as an argument to the `ChakraProvider`. The `Component` is the component that will be rendered, while the `pageProps` is an object that contains properties specific to the current page."
              },
              {
                "name": "obj.Component",
                "default_value": null,
                "optional": false,
                "type_name": "AppProps",
                "description": "Passed as the first argument to the function, allowing for the wrapping of a React component with other props."
              },
              {
                "name": "obj.pageProps",
                "default_value": null,
                "optional": false,
                "type_name": "AppProps",
                "description": "Passed to the `Component` component as an argument, providing additional props for the component to use."
              }
            ],
            "returns": {
              "type_name": "JSXElement",
              "description": "A component that renders the specified `Component` with the provided `pageProps`."
            },
            "usage": null,
            "name": "MyApp",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "register.tsx",
    "path": "web/src/pages/register.tsx",
    "content": {
      "structured": {
        "description": "A React component called `Register` that handles user registration through a Formik form. It utilizes the `@chakra-ui/react`, `urql`, and `Formik` libraries. The component renders a form with input fields for username and password, and a submit button to register the user upon form submission.",
        "items": [
          {
            "id": "3b1aad1e-2c3d-af9c-724b-cf9faab6157d",
            "ancestors": [],
            "description": "Uses the `useMutation` hook to perform a server-side registered mutation with the `REGISTER_MUTATION` payload, passing the form values as arguments.",
            "params": [
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Passed as the second argument to the `useMutation` hook. It contains the props for the register form."
              }
            ],
            "returns": {
              "type_name": "React.FC<registerProps>",
              "description": "A functional component that renders a form for registering a user."
            },
            "usage": {
              "language": "typescript",
              "code": "<Register />;\n",
              "description": ""
            },
            "name": "Register",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 39,
            "docLength": null
          }
        ]
      }
    }
  }
]
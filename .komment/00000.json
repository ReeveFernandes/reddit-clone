[
  {
    "name": "Post.ts",
    "path": "src/entities/Post.ts",
    "content": {
      "structured": {
        "description": "An Entity class `Post` with three properties: `id`, `createdAt`, and `updatedAt`. The `id` property is marked as a primary key using `@PrimaryKey()` and has a type of `number`. The `createdAt` and `updatedAt` properties are marked as timestamps using `@Field(() => Date)` and have default values set using `@Property({ default: \"now()\" })`. The `title` property is marked as a non-nullable string using `@Property({ type: \"text\" })`.",
        "items": [
          {
            "id": "b67e7f5a-d136-48ba-f64a-7a3a096f2b03",
            "ancestors": [],
            "description": "Defines a data structure for storing information about posts, including an ID, creation and update timestamps, and a title.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "id",
                "type_name": "number",
                "description": "Annotated with `@PrimaryKey()`, indicating that it serves as the primary key for the class."
              },
              {
                "name": "createdAt",
                "type_name": "new_expression",
                "description": "Automatically updated upon creation of the object, providing a current date value."
              },
              {
                "name": "updatedAt",
                "type_name": "new_expression",
                "description": "Initialized with a default value of current date and time using the `new Date()` method."
              },
              {
                "name": "title",
                "type_name": "string",
                "description": "Non-nullable, meaning it cannot be null or missing."
              }
            ],
            "name": "Post",
            "location": {
              "start": 6,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 17,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "User.ts",
    "path": "src/entities/User.ts",
    "content": {
      "structured": {
        "description": "An Entity class named User, which represents a user in a graphQL schema. The class has four properties: id (a primary key), createdAt and updatedAt (both of which are timestamps), and username and password (both of which are strings). The code also imports various packages from the Mikro-ORM and Type-GraphQL libraries, which provide tools for defining graphQL schemas and entities.",
        "items": [
          {
            "id": "ee4f8980-c9a6-6286-f94a-4da15ffe7cc7",
            "ancestors": [],
            "description": "Defines a representation of a user in a system, with fields for ID, created and updated at timestamps, username, and password.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "id",
                "type_name": "number",
                "description": "Marked as `@PrimaryKey()`, indicating that it serves as a unique identifier for each user instance, making it the primary key of the User table."
              },
              {
                "name": "createdAt",
                "type_name": "new_expression",
                "description": "Initialized to the current date and time when the class is created or updated."
              },
              {
                "name": "updatedAt",
                "type_name": "new_expression",
                "description": "Automatically updated on save to the latest available date."
              },
              {
                "name": "username",
                "type_name": "string",
                "description": "Unique, meaning it cannot be duplicated for any other user account."
              },
              {
                "name": "password",
                "type_name": "string",
                "description": "Marked as unique, indicating that each user must have a unique password."
              }
            ],
            "name": "User",
            "location": {
              "start": 6,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Migration20240722191709.ts",
    "path": "src/migrations/Migration20240722191709.ts",
    "content": {
      "structured": {
        "description": "A migration class that adds and modifies tables in a database. The `up()` method creates a new table called \"user\" with columns for \"id\", \"created_at\", \"updated_at\", \"username\", and \"password\". It also adds a unique constraint on the \"username\" column. In the \"down()\" method, the table is dropped using the cascade option, and the \"created_at\" column type is changed to a timestamptz(6) data type.",
        "items": [
          {
            "id": "80dafe0e-8d46-2ebd-984e-907320260f68",
            "ancestors": [],
            "description": "Modifies a database by creating and altering tables, adding constraints, and setting default values for columns.",
            "interfaces": [],
            "superclass": "Migration",
            "is_abstract": false,
            "fields": [],
            "name": "Migration20240722191709",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 18,
            "docLength": null
          },
          {
            "id": "a214b43f-6f23-8cae-2640-674db2e43ccf",
            "ancestors": [
              "80dafe0e-8d46-2ebd-984e-907320260f68"
            ],
            "description": "Creates and modifies tables, adding columns and constraints, and updating data types and default values for the `post` table.",
            "params": [],
            "returns": {
              "type_name": "Promise<void>",
              "description": "An object that represents a promise that will be resolved when the asynchronous operation is complete."
            },
            "usage": {
              "language": "typescript",
              "code": "await new Migration20240722191709().up();\n",
              "description": ""
            },
            "name": "up",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "02da4f28-e5b2-789b-fd4d-c813159f578e",
            "ancestors": [
              "80dafe0e-8d46-2ebd-984e-907320260f68"
            ],
            "description": "Modifies two tables in a database: \"user\" and \"post\". The modifications include dropping the default value from the \"created_at\" column in the \"post\" table, and changing its data type to \"timestamptz(6)\".",
            "params": [],
            "returns": {
              "type_name": "Promise<void>",
              "description": "A promise that resolves to no value."
            },
            "usage": {
              "language": "typescript",
              "code": "const migration = new Migration20240722191709();\nawait migration.down();\n",
              "description": ""
            },
            "name": "down",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "post.ts",
    "path": "src/resolvers/post.ts",
    "content": {
      "structured": {
        "description": "A GraphQL resolver for a Post type, handling queries and mutations related to posts. The resolver uses the `type-graphql` library and the `MyContext` type definition. It exposes query methods `posts()` and `post()`, which return a list of posts or a single post respectively, and mutation methods `createPost()`, `updatePost()`, and `deletePost()`, which create, update, and delete posts respectively.",
        "items": [
          {
            "id": "fc52bdc5-69a5-6592-fb45-effc365f31a0",
            "ancestors": [],
            "description": "Provides resolution functions for Post entities in a GraphQL schema, allowing for querying, creating, updating, and deleting posts.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [],
            "name": "PostResolver",
            "location": {
              "start": 5,
              "insert": 4,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 58,
            "docLength": null
          },
          {
            "id": "43f033c8-cbfd-e599-0b40-6ab971457ecb",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Retrieves an array of `Post` objects from the database using the `em` instance's `find()` method.",
            "params": [
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Used to represent an instance of the `MyContext` class, which provides access to data stored in a database or other data storage system."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used as the entity manager for querying posts."
              }
            ],
            "returns": {
              "type_name": "Promise<Post[]>",
              "description": "An array of Post objects."
            },
            "usage": {
              "language": "typescript",
              "code": "const myPosts = await new PostResolver().posts(); // fetch all posts\nconst post = await new PostResolver().post(1); // fetch a single post by id\nconst createdPost = await new PostResolver().createPost(\"My first post\"); // create a new post with title \"My first post\"\nconst updatedPost = await new PostResolver().updatePost(1, \"My updated post\"); // update the title of an existing post\n",
              "description": ""
            },
            "name": "posts",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9a25d883-f1ce-6ca7-be4b-e213a465dbe9",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Retrieves a post from the database based on its ID using the `em.findOne()` method.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify a specific post to be retrieved or created."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Referred to as `em`. This collection represents an instance of `MyContext`."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to represent the context of the application, providing access to entities and their relationships within the application's domain model."
              }
            ],
            "returns": {
              "type_name": "Promise<Post | null>",
              "description": "A promise that resolves to either a Post object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "const { Post } = await post(1); // Returns a single post with the given id\nconst { Posts } = await posts(); // Returns all posts\nconst newPost = await createPost('new title'); // Creates a new post with the specified title\nconst updatedPost = await updatePost(1, 'updated title'); // Updates an existing post with the specified id and title\n",
              "description": ""
            },
            "name": "post",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          },
          {
            "id": "2219a7c9-6fa7-6295-0248-3d58910bab91",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Creates a new post entity and persists it to the database, returning the newly created post object.",
            "params": [
              {
                "name": "title",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Used to set the title of a new post."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Represented by the abbreviation `em`. It provides access to the entity manager, allowing for the creation and persistence of objects in the database."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to represent the entity manager that handles creation and persistence of data objects, such as Posts, in this case."
              }
            ],
            "returns": {
              "type_name": "Promise<Post>",
              "description": "A Post object containing the title, createdAt and updatedAt fields."
            },
            "usage": {
              "language": "typescript",
              "code": "const newPost = await createPost(\"New Post\");\n",
              "description": ""
            },
            "name": "createPost",
            "location": {
              "start": 20,
              "insert": 20,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 12,
            "docLength": null
          },
          {
            "id": "16e10a9a-df51-4dbc-bb4e-ded2ccb22cb2",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Updates an existing post in a database, setting its title if provided, and returning the updated post or null if the post does not exist.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify the post to be updated."
              },
              {
                "name": "title",
                "default_value": null,
                "optional": false,
                "type_name": "string",
                "description": "Nullable. It updates the title field of the post if provided, otherwise leaves it unchanged."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Referenced as `em`. It represents an instance of the `MyContext` class, which provides a repository for managing posts in the application's database."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to manage the persistence and flushing of updated post data to the database."
              }
            ],
            "returns": {
              "type_name": "Promise<Post | null>",
              "description": "A promise that resolves to a Post object or null."
            },
            "usage": {
              "language": "typescript",
              "code": "const post = await PostResolver.updatePost(1, \"New Title\");\n",
              "description": ""
            },
            "name": "updatePost",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "6318e1c6-917f-1c94-bd45-b4357ba69dc8",
            "ancestors": [
              "fc52bdc5-69a5-6592-fb45-effc365f31a0"
            ],
            "description": "Deletes a post with the given ID from the database using the `nativeDelete()` method of the context object.",
            "params": [
              {
                "name": "id",
                "default_value": null,
                "optional": false,
                "type_name": "number",
                "description": "Used to identify the post to be deleted."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Named 'em'. It is an instance of the MyContext class, which provides access to the data layer for the application's data model."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to provide access to the underlying database context for deleting a post."
              }
            ],
            "returns": {
              "type_name": "Promise<boolean>",
              "description": "1 if the post was deleted successfully, and false otherwise."
            },
            "usage": {
              "language": "typescript",
              "code": "await PostResolver.deletePost(123) // Assuming ID 123 exists\nconst post = await PostResolver.updatePost(123, 'New Title')\n",
              "description": ""
            },
            "name": "deletePost",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "user.ts",
    "path": "src/resolvers/user.ts",
    "content": {
      "structured": {
        "description": "A GraphQL resolver for a user registration and login mutation. The resolver uses the `argon2` library for password hashing and verification. The code creates a `User` entity with fields for username, password, createdAt, and updatedAt, and defines mutations to register and login a user using their username and password. The `login` mutation also validates the provided password against the stored password for the given username.",
        "items": [
          {
            "id": "b1c3c430-5564-7abf-da45-8fffcf125834",
            "ancestors": [],
            "description": "Provides a form for users to input their username and password for authentication purposes.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "username",
                "type_name": "string",
                "description": "Mandatory, representing the user's username for authentication purposes."
              },
              {
                "name": "password",
                "type_name": "string",
                "description": "Required, indicating that it is a mandatory field for the user to fill in when signing up or logging in."
              }
            ],
            "name": "UsernamePasswordInput",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 7,
            "docLength": null
          },
          {
            "id": "255a4e73-3b7e-bc94-144d-22d9cb95a814",
            "ancestors": [],
            "description": "Centralizes error information related to fields within an object, providing a convenient means for storing and accessing field-specific error messages.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "field",
                "type_name": "string",
                "description": "Used to store the name of the field that caused the error."
              },
              {
                "name": "message",
                "type_name": "string",
                "description": "Used to provide a detailed error message for the corresponding field."
              }
            ],
            "name": "FieldError",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 7,
            "docLength": null
          },
          {
            "id": "8588eafc-88e1-8ca0-5d40-55b742c6f77b",
            "ancestors": [],
            "description": "Represents a response to a user, containing information about any errors that occurred during processing and the user itself.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [
              {
                "name": "errors",
                "type_name": "FieldError[]",
                "description": "Nullable, indicating that it can be absent or contain a list of error messages related to the user response."
              },
              {
                "name": "user",
                "type_name": "User",
                "description": "Nullable."
              }
            ],
            "name": "UserResponse",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "2b50ffb6-a48d-0b87-b643-90d45789e895",
            "ancestors": [],
            "description": "Resolves user-related GraphQL mutations by creating and updating user objects in a database, verifying passwords, and returning the resolved user object.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [],
            "name": "UserResolver",
            "location": {
              "start": 40,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 86,
            "docLength": null
          },
          {
            "id": "a94aa806-d80b-e2a2-0848-57e5c9338e8b",
            "ancestors": [
              "2b50ffb6-a48d-0b87-b643-90d45789e895"
            ],
            "description": "Validates user input, creates a new `User` entity, and persists it to the database upon successful validation.",
            "params": [
              {
                "name": "options",
                "default_value": null,
                "optional": false,
                "type_name": "UsernamePasswordInput",
                "description": "Used to validate and create a new user account."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Referred to as `em`. It is an instance of `MyContext`, which is likely a custom context class for managing data in your application."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to manage the persistence of the created user instance through the `persistAndFlush()` method."
              }
            ],
            "returns": {
              "type_name": "Promise<UserResponse>",
              "description": "An object containing the registered user."
            },
            "usage": {
              "language": "typescript",
              "code": "const registerResult = await UserResolver.register({\n    username: \"myusername\",\n    password: \"mypassword\"\n}, {\n    em: new MyContext()\n});\n",
              "description": ""
            },
            "name": "register",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 51,
            "docLength": null
          },
          {
            "id": "63754862-ff9c-97bc-2d47-6292de7d20d9",
            "ancestors": [
              "2b50ffb6-a48d-0b87-b643-90d45789e895"
            ],
            "description": "Authenticates a user by checking if their username and password match an existing user record and verifying the password using the Argon2 library. If the credentials are valid, it returns the authenticated user object.",
            "params": [
              {
                "name": "options",
                "default_value": null,
                "optional": false,
                "type_name": "UsernamePasswordInput",
                "description": "Used to hold user input for authentication, including the username and password."
              },
              {
                "name": "obj",
                "default_value": null,
                "optional": false,
                "type_name": "object",
                "description": "Annotated with `@Ctx()`. This indicates that it represents an optional context object that can be used within the function to access data or services provided by the application's context."
              },
              {
                "name": "obj.em",
                "default_value": null,
                "optional": false,
                "type_name": "MyContext",
                "description": "Used to access and manipulate data from the database."
              }
            ],
            "returns": {
              "type_name": "Promise<UserResponse>",
              "description": "An object containing the authenticated user."
            },
            "usage": {
              "language": "typescript",
              "code": "const input = { username: 'john', password: 'secret' };\nconst result = await UserResolver.login(input);\n",
              "description": ""
            },
            "name": "login",
            "location": {
              "start": 95,
              "insert": 95,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 30,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "constants.ts",
    "path": "src/constants.ts",
    "content": {
      "structured": {
        "description": "A constant `__prod__` that represents whether the current environment is production or not. The `process.env.NODE_ENV` property is used to determine the environment, and the value of `__prod__` is set to `true` in production environments and `false` otherwise.",
        "items": []
      }
    }
  },
  {
    "name": "index.ts",
    "path": "src/index.ts",
    "content": {
      "structured": {
        "description": "An express server with apollo server and mikro orm. It initializes a MikroORM instance using the configuration file, migrates the database, builds the schema using GraphQL, creates an ApolloServer instance and applies middleware to the express app, and persists a post in the database using MikroORM.",
        "items": [
          {
            "id": "abb1e514-d2fb-5a80-9b4e-35ea62724bbc",
            "ancestors": [
              "58b808da-8f12-7a9b-714f-b7bc39cac9b0"
            ],
            "description": "Starts an HTTP server listening at port 4000 and logs the message \"Server started on localhost:4000\" to the console when executed.",
            "name": null,
            "location": {
              "start": 67,
              "insert": 68,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 6,
            "docLength": null
          },
          {
            "id": "df3b84ed-9e0f-aab8-fc42-d86f0769b42d",
            "ancestors": [],
            "description": "Logs any error parameters passed to it through the `console.error()` method.",
            "name": null,
            "location": {
              "start": 85,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "mikro-orm.config.ts",
    "path": "src/mikro-orm.config.ts",
    "content": {
      "structured": {
        "description": "Configuration parameters for MikroORM, a popular ORM (Object-Relational Mapping) toolkit. It specifies various settings for the PostgreSQL database driver, including the database name, username, password, port number, and debug mode. Additionally, it defines which entities will be used with MikroORM, and allows global context access. The code also sets the path to the migrations folder, which contains SQL scripts for creating and modifying the database schema.",
        "items": []
      }
    }
  },
  {
    "name": "types.ts",
    "path": "src/types.ts",
    "content": {
      "structured": {
        "description": "An interface `MyContext` that provides access to an Entity Manager and Express Request and Response objects. The Entity Manager is a fundamental part of any Object-Relational Mapping (ORM) tool, allowing developers to interact with databases using objects rather than writing SQL queries directly. The `IDatabaseDriver<Connection>` type parameter represents the driver used to connect to the database, while the `<Connection>` type parameter represents the connection to the database. This code uses the `@mikro-orm/core` and `@express/node` packages.",
        "items": []
      }
    }
  },
  {
    "name": "hello.ts",
    "path": "src/resolvers/hello.ts",
    "content": {
      "structured": {
        "description": "A GraphQL resolver class named HelloResolver, which contains a single query method hello() that returns a string value \"Hello World!\". The query method is marked with the `@Query()` decorator from the `type-graphql` package, indicating that it is a GraphQL query.",
        "items": [
          {
            "id": "08f29c38-6fff-9597-4d49-af9822d97b11",
            "ancestors": [],
            "description": "Defines a resolver for generating a string message \"Hello World!\" in response to an unknown query.",
            "interfaces": [],
            "superclass": null,
            "is_abstract": false,
            "fields": [],
            "name": "HelloResolver",
            "location": {
              "start": 4,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 6,
            "docLength": null
          },
          {
            "id": "b03181a4-0a4b-2ca6-8c4c-1472e3994412",
            "ancestors": [
              "08f29c38-6fff-9597-4d49-af9822d97b11"
            ],
            "description": "Returns the string \"Hello World!\" when called, indicating successful resolution of the hello request.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "\"Hello World!\""
            },
            "usage": {
              "language": "typescript",
              "code": "const helloResolver = new HelloResolver();\nconst greeting = await helloResolver.hello(); // \"Hello World!\"\n",
              "description": ""
            },
            "name": "hello",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]